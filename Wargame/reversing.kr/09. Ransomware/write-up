08. Direct3D FPS
  - 문제 정보
  01) 문제 파일 압축 해제 시 FPS.exe(문제파일), D3DX9_43.dll(D3DX9버전 런타임 라이브러리), data(문제 관련 리소스 폴더) 확인
  02) FPS.exe 파일을 실행하면 FPS 게임이 실행됨.
  
  - 풀이 절차
  01) IDA로 분석 시 WinMain 함수에서 모든 처리 로직이 운영됨을 알 수 있음.
  02) 전반적인 로직 순서
    (1) SetRect로 맵 범위 오브젝트 지정
    (2) *.x 파일을 이용하여 오브젝트 생성 및 배치 후 텍스쳐 삽입
    (3) 플레이어 움직임(마우스, 키보드) 정의 후 실시간으로 Collision 관련 처리를 감시하며 ViewPort 랜더링 갱신
  03) IDA 기준으로 정확하게 분석해야할 필요가 있는 위치는 총 3가지 존재
    (1) Hexray 디컴파일 결과 기준 WinMain 함수 133번째 라인의 dword_7B7020 변수 비교하는 부분을 통해 해당 변수가 0일때 게임 종료됨을 확인
      -> 해당 변수관련 처리 로직을 확인하면 194번째 라인에 if문 처리 후 특정 조건에 의해 -2씩 차감됨을 확인
      -> if 문과 관련된 sub_402460 함수 내용 확인 시 collision 감지로 추정되는 부분이 존재함
      -> 이를 바탕으로 dword_7B7020 변수는 플레이어 체력 임을 확인할 수 있음
      -> 디버깅 시 해당 변수 확인하면 dword_7B7020에 플레이어 실제 체력인 10이 대입되어 있음을 확인 가능
    (2) WinMain 함수 139번째 라인에 위치한 sub_4039C0 함수 호출부를 통해 함수 내용 확인 시 "Game Clear!"와 함께 메시지 박스 출력부 확인
      -> 이를 통해 해당 부분에서 게임 클리어 시 FLAG가 출력됨을 유추할 수 있으며 MessageBoxA 함수 호출부에서 2번째 파라미터가 FLAG에 대응됨
      -> 해당 변수를 추적하여 Xref 정보를 확인해보면 sub_4039C0, sub_403400 함수에서 해당 변수를 호출함을 확인
      -> sub_403400 함수 확인 시 FLAG 변수와 XOR 연산하는 배열을 17번 라인에서 확인할 수 있으며 해당 배열을 XOR 암호화 키임을 유추할 수 있음
    (3) (2)에서 분석한 함수의 1번째 라인에서 this 객체를 통해서 sub_403440 함수에 연산 수행결과를 반환하여 처리함을 알 수 있음.
      -> sub_403440 함수 분석 시 sub_4027C0 함수 호출하는 부분에서 Collision 감지로 추정되는 부분을 발견할 수 있음.
      -> 정확한 분석은 어려웠으나 게임을 디버깅하면서 캐릭터가 총을 쐈을때 해당 로직이 동작하며, 적 캐릭터가 총을 맞았을때와 아닐때를 구분 가능함.
        - 총 맞을 경우 : sub_403440 함수의 리턴값이 0 이상의 양의 정수임
        - 안맞을 경우 : sub_403440 함수의 리턴값이 -1임
      -> 이를 바탕으로 플레이어 공격에 대한 적 Collision 탐지 부분임을 추측할 수 있으며 이를 통해 sub_403400 함수와 관련한 아래와 같은 정보를 알 수 있음.
        - dword_409190 : 적의 체력 정보를 가지고 있는 배열
        - dword_409194 : 적 사망 여부를 감지하는 배열
        - v2 : 적의 체력 정보를 임시로 저장하여 처리하는 변수
  04) 03)의 분석 정보를 바탕으로 아래와 같이 FPS.exe 바이너리를 수정함
    - .text:00403435 : add edx, 0FFFFFFFEh -> add edx, 0FFFFFF80h (적 체력 2씩 제거 -> 80씩 제거로 변경)
    - .text:0040312B : sub dword_407020, 2 -> sub dword_407020, 0 (플레이어 체력 2씩 제거 -> 제거 안됨으로 변경)
  05) 이렇게 2가지 부분을 제거 후 게임 실행하여 필드에 있는 모든 몹을 죽이면 게임이 끝나지는 않음.
  06) 여기에서 다양한 방법이 존재하겠으나 본인의 경우 Blender 프로그램을 이용하여 오브젝트 조작을 아래와 같은 순서로 실시함
    (1) Blender 설치 후 io_scene_directx 플러그인을 Blender의 Addon 폴더에 폴더채로 삽입
    (2) Blender 실행 후 Preference 에서 io_scene_directx Addon 활성화
    (3) Blender 프로젝트 새로 실행 후 오프젝트를 모두 제거한 다음 *.x 파일을 export
    (4) (3)에서 생성한 파일을 복사하여 아래 명단에 해당하는 파일들에 덮어씌우기
      - skybox.x, Wall_s1 ~ s2.x, Wall1 ~ 4.x
  07) 06)까지 수행 후 게임 실행 시 벽이 없는 상태로 게임을 실행 할 수 있으며 벽 넘어 모든 적을 죽일 수 있음.
  08) floor 영역에 있는 모든 적 캐릭터를 없애고 주변을 살펴보면 floor 영역 바깥에 고구마 한마리가 더 있는 것을 확인할 수 있음.
  09) 해당 고구마를 마지막으로 죽이면 게임 클리어.